-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")

-- Constants
local COLORS = {
    SHERIFF = Color3.fromRGB(0, 120, 255),
    MONSTER = Color3.fromRGB(255, 60, 60),
    INNOCENT = Color3.fromRGB(60, 220, 60),
    BACKGROUND = Color3.fromRGB(40, 40, 40),
    HEADER = Color3.fromRGB(30, 30, 30),
    TEXT = Color3.fromRGB(255, 255, 255),
    BUTTON = Color3.fromRGB(60, 60, 60)
}

local ROLES = {
    SHERIFF = "Sheriff",
    MONSTER = "Monster",
    INNOCENT = "Innocent"
}

-- Variables
local playerRoles = {}
local guiDestroyed = false
local recreationInProgress = false

-- GUI Elements
local ScreenGui, MainFrame, Header, CloseButton, RoleList, ResizeButton

-- Functions
local function CreateGui()
    if ScreenGui then ScreenGui:Destroy() end

    ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "RoleTrackerGUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")

    MainFrame = Instance.new("Frame")
    MainFrame.Size = UDim2.new(0, 300, 0, 400)
    MainFrame.Position = UDim2.new(1, -320, 0.5, -200)
    MainFrame.BackgroundColor3 = COLORS.BACKGROUND
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui

    Header = Instance.new("Frame")
    Header.Size = UDim2.new(1, 0, 0, 30)
    Header.BackgroundColor3 = COLORS.HEADER
    Header.BorderSizePixel = 0
    Header.Parent = MainFrame

    local Title = Instance.new("TextLabel")
    Title.Size = UDim2.new(1, -30, 1, 0)
    Title.Position = UDim2.new(0, 5, 0, 0)
    Title.BackgroundTransparency = 1
    Title.Text = "Player Roles"
    Title.TextColor3 = COLORS.TEXT
    Title.TextSize = 18
    Title.Font = Enum.Font.SourceSansBold
    Title.TextXAlignment = Enum.TextXAlignment.Left
    Title.Parent = Header

    CloseButton = Instance.new("TextButton")
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.BackgroundColor3 = COLORS.BUTTON
    CloseButton.Text = "X"
    CloseButton.TextColor3 = COLORS.TEXT
    CloseButton.TextSize = 18
    CloseButton.Font = Enum.Font.SourceSansBold
    CloseButton.Parent = Header

    RoleList = Instance.new("ScrollingFrame")
    RoleList.Size = UDim2.new(1, -10, 1, -40)
    RoleList.Position = UDim2.new(0, 5, 0, 35)
    RoleList.BackgroundTransparency = 1
    RoleList.ScrollBarThickness = 6
    RoleList.Parent = MainFrame

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 5)
    UIListLayout.Parent = RoleList

    ResizeButton = Instance.new("TextButton")
    ResizeButton.Size = UDim2.new(0, 20, 0, 20)
    ResizeButton.Position = UDim2.new(1, -20, 1, -20)
    ResizeButton.BackgroundColor3 = COLORS.BUTTON
    ResizeButton.Text = "â†˜"
    ResizeButton.TextColor3 = COLORS.TEXT
    ResizeButton.TextSize = 14
    ResizeButton.Font = Enum.Font.SourceSansBold
    ResizeButton.Parent = MainFrame

    -- Make the frame draggable
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    Header.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    Header.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
        guiDestroyed = true
    end)

    -- Resize functionality
    local resizing = false
    ResizeButton.MouseButton1Down:Connect(function()
        resizing = true
    end)

    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            resizing = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if resizing and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - ResizeButton.AbsolutePosition
            local newSize = Vector2.new(
                math.clamp(MainFrame.AbsoluteSize.X + delta.X, 200, 500),
                math.clamp(MainFrame.AbsoluteSize.Y + delta.Y, 300, 700)
            )
            MainFrame.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
        end
    end)
end

local function AddRoleLabel(player, role)
    local label = Instance.new("Frame")
    label.Size = UDim2.new(1, -10, 0, 30)
    label.BackgroundColor3 = COLORS[role:upper()]
    label.BorderSizePixel = 0
    label.Parent = RoleList

    local playerName = Instance.new("TextLabel")
    playerName.Size = UDim2.new(1, -10, 1, 0)
    playerName.Position = UDim2.new(0, 5, 0, 0)
    playerName.BackgroundTransparency = 1
    playerName.Text = player.Name
    playerName.TextColor3 = COLORS.TEXT
    playerName.TextSize = 16
    playerName.Font = Enum.Font.SourceSans
    playerName.TextXAlignment = Enum.TextXAlignment.Left
    playerName.Parent = label

    local roleText = Instance.new("TextLabel")
    roleText.Size = UDim2.new(0, 60, 1, 0)
    roleText.Position = UDim2.new(1, -65, 0, 0)
    roleText.BackgroundTransparency = 1
    roleText.Text = role
    roleText.TextColor3 = COLORS.TEXT
    roleText.TextSize = 14
    roleText.Font = Enum.Font.SourceSansBold
    roleText.TextXAlignment = Enum.TextXAlignment.Right
    roleText.Parent = label

    return label
end

local function UpdateRoleList()
    for _, child in ipairs(RoleList:GetChildren()) do
        if child:IsA("Frame") then
            child:Destroy()
        end
    end

    for _, player in ipairs(Players:GetPlayers()) do
        local role = playerRoles[player.Name] or ROLES.INNOCENT
        AddRoleLabel(player, role)
    end

    RoleList.CanvasSize = UDim2.new(0, 0, 0, #RoleList:GetChildren() * 35)
end

local function UpdatePlayerRole(player, role)
    playerRoles[player.Name] = role
    UpdateRoleList()
end

local function FindSheriff()
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Backpack:FindFirstChild("Gun") or (player.Character and player.Character:FindFirstChild("Gun")) then
            return player
        end
    end
    return nil
end

local function FindMonster()
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Backpack:FindFirstChild("Monster") or (player.Character and player.Character:FindFirstChild("Monster")) then
            return player
        end
    end
    
    local monsterFolder = workspace:FindFirstChild("MonsterFolder")
    if monsterFolder then
        for _, model in ipairs(monsterFolder:GetChildren()) do
            if model.Name:sub(1, 7) == "MONSTER" then
                local playerName = model.Name:sub(8)
                return Players:FindFirstChild(playerName)
            end
        end
    end
    
    return nil
end

local function UpdateRoles()
    local sheriff = FindSheriff()
    local monster = FindMonster()

    for _, player in ipairs(Players:GetPlayers()) do
        if player == sheriff then
            UpdatePlayerRole(player, ROLES.SHERIFF)
        elseif player == monster then
            UpdatePlayerRole(player, ROLES.MONSTER)
        else
            UpdatePlayerRole(player, ROLES.INNOCENT)
        end
    end
end

local function Highlight()
    for _, player in ipairs(Players:GetPlayers()) do
        if player.Character then
            local highlight = player.Character:FindFirstChild("Highlight") or Instance.new("Highlight")
            highlight.Parent = player.Character
            
            local role = playerRoles[player.Name] or ROLES.INNOCENT
            highlight.FillColor = COLORS[role:upper()]
            highlight.OutlineColor = COLORS.TEXT
            highlight.OutlineTransparency = 0.5
        end
    end
end

local function MonitorGun()
    workspace.ChildAdded:Connect(function(child)
        if child.Name == "Gun" then
            child.AncestryChanged:Connect(function(_, parent)
                if parent and parent:IsA("Backpack") or (parent:IsA("Model") and Players:GetPlayerFromCharacter(parent)) then
                    local newSheriff = parent:IsA("Backpack") and parent.Parent or Players:GetPlayerFromCharacter(parent)
                    if newSheriff and newSheriff:IsA("Player") then
                        UpdatePlayerRole(newSheriff, ROLES.SHERIFF)
                        Highlight()
                    end
                end
            end)
        end
    end)
end

local function RecreateGui()
    if guiDestroyed and not recreationInProgress then
        recreationInProgress = true
        wait(3)
        if not Players.LocalPlayer.PlayerGui:FindFirstChild("RoleTrackerGUI") then
            CreateGui()
            guiDestroyed = false
        end
        recreationInProgress = false
    end
end

local heartbeatConnection
local function Initialize()
    CreateGui()
    MonitorGun()
    
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end

    heartbeatConnection = RunService.Heartbeat:Connect(function()
        UpdateRoles()
        Highlight()
        if not Players.LocalPlayer.PlayerGui:FindFirstChild("RoleTrackerGUI") then
            guiDestroyed = true
            RecreateGui()
        end
    end)
end

-- Start the script
Initialize()

-- Clean up function
local function CleanUp()
    if heartbeatConnection then
        heartbeatConnection:Disconnect()
    end
    if ScreenGui then
        ScreenGui:Destroy()
    end
end

-- Connect clean up to player removal
Players.PlayerRemoving:Connect(function(player)
    if player == Players.LocalPlayer then
        CleanUp()
    end
end)
